import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

//This class is to rotate a PNG image

public class RotateImage{

//Rotate image by 90 degree
	 private static BufferedImage Rotate(BufferedImage image)
	    {
	        AffineTransform at = AffineTransform.getRotateInstance(
	            Math.PI/2, image.getWidth()/2.0, image.getHeight()/2.0);
	        return createTransformed(image, at);
	    }
//This method is to flip the image
	    private static BufferedImage Flip(BufferedImage image)
	    {
	        AffineTransform at = new AffineTransform();
	        at.concatenate(AffineTransform.getScaleInstance(1, -1));
	        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));
	        return createTransformed(image, at);
	    }
//This is the GUI to display the image
    private static void GUI(){
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new GridLayout(1, 1));

        BufferedImage image = null;
        try
        {
            image = ImageIO.read(new File("123.png"));
        }
        catch (IOException e1)
        {
            e1.printStackTrace();
        }

        JPanel panel = new JPanel(new GridLayout(2,2));
        panel.add(createComponent("Picture", image));
        panel.add(createComponent("Rotat90", Rotate(image)));
        panel.add(createComponent("Flipp", Flip(image)));
        panel.add(createComponent("Rotat180", Rotate(Rotate(image))));
 

        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

   

    private static BufferedImage createTransformed(
        BufferedImage image, AffineTransform at)
    {
        BufferedImage newImage = new BufferedImage(
            image.getWidth(), image.getHeight(),
            BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = newImage.createGraphics();
        g.transform(at);
        g.drawImage(image, 0, 0, null);
        g.dispose();
        return newImage;
    }

    private static Component createComponent(
        String title, BufferedImage image)
    {
        JLabel label = new JLabel(new ImageIcon(image));
        JPanel panel = new JPanel(new GridLayout(1,1));
        panel.add(label);
        panel.setBorder(BorderFactory.createTitledBorder(title));
        return panel;
    }
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            
            public void run()
            {
                GUI();
            }
        });
    }
}
